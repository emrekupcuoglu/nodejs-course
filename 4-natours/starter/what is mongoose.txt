Mongoose is an Object Data Modeling (ODM) library
for mongoDB and Node.js, a higher level of abstraction.
It is a bit like Express.js
Express.js is an abstraction over Node.js
Mongoose is an abstraction over mongoDB driver
An ODM library is a way for us to write JavaScript
that will then interact with a database.
We could use a regular mongoDB driver to access our database
and it would work just fine.
But instead we use mongoose because it gives us a lot more
functionality out of the box, allowing for simpler and
faster development.
Some of the features mongoose gives us are:
Schemas to model data and relationships, easy data validation,
simple query API, middleware, etc.

Mongoose Schema: where we model our data, by describing the structure of our data,
set default values, and validation.

Mongoose Model: We take the schema and make a model out of it.
Model is a wrapper for the schema, providing an interface to the database for CRUD operations

Mongoose is all about models
Model is like a blueprint we use to make documents.
So they are a bit like classes.
We create a model in mongoose in order to create documents using the model
and to use CRUD operations.

To create a model we use a schema
We use schema to describe our data, to set default values,
to validate the data, etc.


If using skip() with sort(), be sure to include at least one field in your sort that contains unique values, before passing results to skip()

Just like Express.js mongoose also has the concept of middleware
Middleware is an absolutely fundamental concept in mongoose just like in Express js
We will use middleware throughout this project.
Just like with Express js we can use mongoose middleware to make something happen between two events
e.g. for each time a document is saved to the database we can run a function between when the save command is issued
and the actual saving of the document or after the actual saving.
Because we can define actions to run before or after a certain event mongoose middleware is divided into two kinds pre hook and post hook 
There are 4 types of middleware in mongoose: Document, query, aggregate, and model middleware 

Just like virtual properties we define a middleware on the schema
We need to call the next() function after our middleware just like in Express js

Document Middleware
Document middleware is a middleware that can act on the currently processed document

Query Middleware
Query middleware allows us to run functions before or after a certain query is executed.

Aggregate Middleware
Aggregate middleware allows us to run functions before or after an aggregation happens.


Data Validation
Validation is checking if the entered values are in the right format for each field in
our document schema and also that values have actually been entered for all of the required fields.
We will do the data validation on the model because of the fat model, thin controller philosophy.
Mongoose comes with bunch of data validation tools out of the box.

Custom Validators
Sometimes the built in validators are not enough and we need custom validators.
Validators are functions that returns either true or false.
If it returns false than it means there is an error
If it returns true than the validation is correct and the input can be accepted. 

Third Party Validators
We can also use third party validators libraries like validator.js
There are really useful validators there so definitely check them out

Data Sanitization
Data Sanitization is to make sure the input data is clean.
Clean in a sense that there is no malicious code being injected into our database
or into the application itself.
During sanitization we remove unwanted characters and code from the data.
NEVER ACCEPT INPUT DATA FROM A USE AS IT IS.

!!!!!!!!!!!!!!!!!!!!!!!!!IMPORTANT!!!!!!!!!!
TO USE A DIFFERENT DATABASE THAN TEST SPECIFY IT IN THE CONNECTION STRING LIKE THIS
E.G.mongodb+srv://emre:<PASSWORD>@cluster0.o3co3qa.mongodb.net/<DATABASE>?retryWrites=true&w=majority