Versioning and updating

We can check the version of dependencies in out package.json file
The first number (1 in the case of slugify) denotes a major release
These releases can break the code(e.x the  function names can change or the parameters of the functions)
Second number denotes minor releases
These usually introduce new features and are backwards compatible
Third number denotes patches these are usually for bug fixes

The ^ symbol in front of the package name which npm specifies by default
means that we accept only patches and minor releases not major releases
If we use the ~ symbol instead we only accept patch releases
If we use the * symbol than we will accept all versions


  "dependencies": {
    "slugify": "^1.6.5"
  }


We can check to see if there are outdated packages using the npm outdated command
That will give us a table with all the packages that are updated
If there are no outdated packages than it will return nothing

We can install a certain package at a certain version number
Let's install slugify at version 1.0.0

We do that by using the @ symbol
npm install {package name}@{version number}
npm install slugify@1.0.0

If we run npm outdated now it will shows us that the slugify is outdated

We can update using npm update slugify
If we set the accepted updates to only patches with the ~ symbol
than we only get the patches when we run npm update slugify
##############IMPORTANT###################
This doesn't not update the package.json
To update the package.json add --save at the end
e.x. npm update slugify --save
This doesn't work with patches using ~ at the moment



We can install all of the dependencies with the command npm install
This command read the package.json file,read the dependencies and installs them
Let's say we are working from another computer we don't want to
copy all these node modules to out other computer
we don't want to copy thousands of files manually
or that we get a code from a github repository
node modules are not included in repositories
Fortunately we can just use npm install to install all the dependencies

#######IMPORTANT#########
If we open the package-lock.json we get a list of all the versions
of all the packages we are using and that includes dependencies of our dependencies
With the  package-lock.json file version numbers are locked in
If you are sharing your code using github gitlab etc,
always share your package.json and package-lock.json file
because these files are necessary to reconstruct the module folder




