When we try to access a webpage like for example https://www.google.com/maps
http is the protocol name and stands for: hyper text transfer protocol.
google is the domain name,
maps is the resource.

1.
First we need to find the real address of the website we are trying to access
google is just an easy to remember placeholder for humans.
To find the real address we do a DNS lookup
DNS stands for Domain Name Server
DNS are special servers which are basically like phone books for the internet.
DNS will convert the domain nae to the IP address.

Port number is to identify a specific service running on the server.
You can think of it as a sub-address.
The port number has nothing to do with the google/maps
resource we are want to access. That resource will be sent over the http request.

2.
After we get the IP address from the DNS.
A TCP/IP socket connection is established between the server and the client
This connection is typically is kept alive for the entire time it takes to
transfer all the files of the website. 
TCP stands for: Transmission Control Protocol.
IP stands for: Internet Protocol.
A communication protocol is a system of rules that allows two or more parties
to communicate.
Together they are the communication protocols that define exactly
how data travels across the web.
They are the internets fundamental control system.
They are the ones who set the rules about how data moves on the internet.


TCP/IP is what controls the web

3.
Then the client sends an http request using the TCP/IP connection
http is another communication protocol
http is a protocol that allows clients and web servers to communicate
by sending requests and response messages from client to server and back 

An http request looks like This

  GET /maps HTTP/1.1

  Host:www.google.com
  User-Agent: Mozilla/5.0
  Accept-Language:en-US

  <BODY>

  The first line is the start line and it contains the most important information
  Start line consists of 3 things: http method, request target, and http version
  Start line: HTTP method + request target + HTTP version

  There are many http methods but the most important are:
  get:for requesting data
  post: for sending data
  put and patch to modify data

  This is where the server is told that we want to access the maps resource.
  Request target is the resource we want to access.
  If the request target was empty (if it was just a "/") then we would
  access the website's root. Which is google.com in this example.

  The next part of the request are the request headers.
  The request headers are information we send about the request itself.
  There are tons of different headers available
  like what browser is used to make the request, a what time, users language
  and many many more.

  In the case where we are sending data to the server there will also be a request body.
  Containing the data(e.x. data coming from an html form)

  4.
  The request hits the server and the servers send an http response to the client
  HTTP response message looks quite similar tot he request
  And http response looks like this:

  HTTP/1.1 200 OK

  Date:Sun, 25 September 2022
  Content-Type: text/html
  Transfer-Encoding: chunked

  <BODY>

  Start line of the http response consists of HTTP version, status code, and status message
  Start line: HTTP version + status code + status message

  Response headers are information about the response itself.
  There are tonnes of different response headers and we can make our own as well.
  Backend developers specify the response headers and send them back in the response
  unlike request headers.

  Last part of the response header is the body.
  It is the developer who specifically sends back the body in the response.

  In this imaginary website we only did one request and one response.
  However in a real website there will be many requests and responses.
  Because when we do the first request all we get back is the initial html
  That file than will get scanned for all the assets it needs
  to build the entire website like JavaScript files, CSS files, image files etc
  and for each of these different files the browser will make a new http request
  to the server.
  There can be multiple requests and responses happening at the same time,
  but the amount is limited or the connection would start to slow down
  Finally when all the files arrive the website is rendered on the browser
  according to the html, css, and JavaScript specifications.

  HOW DOES REQUEST AND RESPONSE DATA IS ACTUALLY SENT ACROSS THE WEB

  First the TCP breaks up the requests into thousands of small chunks called packets
  before they are sent.
  Once they arrive at their destination it will re-assemble all the packets
  into the original request or response so that the message arrive at the destination
  as quickly as possible. Which wouldn't be possible if we sent the website as one big chunk.
  That would be like going through the dense traffic with the biggest bus you can imagine.

  The job of the IP protocol is to sent and route these packets through the internet.
  It ensures all of them arrive at the destination they should go
  using IP addresses on each packet.
  This is just a very broad overview of what happens behind the scenes of the web.










